generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  hashKey       String?
  lang          String?
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[]
  projects      Project[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}

model Project {
  id            String          @id @default(uuid())
  name          String
  userId        String
  slug          String?         @unique
  description   String?
  memoId        String?
  isFreeTier    Boolean         @default(true)
  endpoint      String?         @unique
  keyId         String?         @unique
  domains       Domain[]
  notifications Notifications[]
  environments  Environments[]
  containers    Containers[]
  auditLogs     AuditLogs[]
  usageLogs     UsageLogs[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime
  updatedAt     DateTime

  @@map("project")
}

model Domain {
  id               String       @id @default(uuid())
  name             String // full domain e.g. "www.xyz.com"
  alias            String // subdomain/alias
  status           String // e.g. "Invalid", "Pending", "Active"
  projectId        String
  telementry_key   String       @unique
  telemetry_events Telementry[]
  project          Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("domain")
}

model Telementry {
  id         String   @id @default(cuid())
  key        String
  event      String
  properties Json
  revoked    Boolean  @default(false)
  timestamp  DateTime @default(now())
  domain     Domain   @relation(fields: [key], references: [telementry_key])

  @@map("telementry")
}

model Notifications {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title     String
  desc      String?
  icon      String?
  url       String?
  isSeen    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Environments {
  id          String   @id @default(uuid())
  projectId   String
  environment String?
  name        String
  value       Json
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("environments")
}

model Files {
  id          String     @id @default(uuid())
  key         String
  name        String
  size        Int
  url         String?
  downloadUrl String?
  type        String
  embeddings  String[]
  containerId String
  container   Containers @relation(fields: [containerId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("files")
}

model Links {
  id          String     @id @default(uuid())
  type        String?
  url         String @unique
  markdown    String?
  summary     String?
  containerId String
  container   Containers @relation(fields: [containerId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("links")
}

model Containers {
  id          String   @id @default(uuid())
  key         String   @unique
  name        String
  description String?
  resources   Int?     @default(0)
  filesId     String[]
  projectId   String
  status      String?  @default("active")
  links       Links[]
  files       Files[]
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("containers")
}

model AuditLogs {
  id        String   @id @default(uuid())
  time      DateTime
  actor     String
  action    String
  endpoint  String
  credits   Int?
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("auditLogs")
}

model UsageLogs {
  id           String   @id @default(uuid())
  year         Int?
  month        Int?
  api_calls    Int?
  credits_used Decimal?
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("usageLogs")
}
