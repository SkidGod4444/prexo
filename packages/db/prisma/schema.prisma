generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DEV_DATABASE_URL")
  directUrl = env("DEV_DIRECT_DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String
  hashKey       String?
  lang          String?
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[]
  projects      Project[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}

model Project {
  id            String          @id @default(uuid())
  name          String
  userId        String
  description   String?
  memoId        String?
  keyId         String?         @unique
  domains       Domain[]
  notifications Notifications[]
  environments  Environments[]
  files         Files[]
  containers    Containers[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime
  updatedAt     DateTime

  @@map("project")
}

model Domain {
  id        String   @id @default(uuid())
  name      String // full domain e.g. "www.xyz.com"
  alias     String // subdomain/alias
  status    String // e.g. "Invalid", "Pending", "Active"
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  hash      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("domain")
}

model Notifications {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title     String
  desc      String?
  icon      String?
  url       String?
  isSeen    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Environments {
  id          String   @id @default(uuid())
  projectId   String
  environment String?
  name        String
  value       Json
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("environments")
}

model Files {
  id          String   @id @default(uuid())
  key         String
  name        String
  size        Int
  url         String
  downloadUrl String
  type        String
  embeddings  String[]
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("files")
}

model Containers {
  id          String   @id @default(uuid())
  key         String   @unique
  name        String
  description String?
  resources   Int?     @default(0)
  filesId     String[]
  projectId   String
  status      String?  @default("active")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("containers")
}
